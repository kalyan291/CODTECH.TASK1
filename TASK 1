import re
from zxcvbn import zxcvbn

def check_password_strength(password):
    score = 0
    feedback = []

    # Length check
    length = len(password)
    if length >= 8:
        score += 1
    if length >= 12:
        score += 1

    # Complexity checks
    if re.search(r'[a-z]', password):
        score += 1
    if re.search(r'[A-Z]', password):
        score += 1
    if re.search(r'[0-9]', password):
        score += 1
    if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        score += 1

    # Uniqueness check using zxcvbn
    zxcvbn_result = zxcvbn(password)
    zxcvbn_score = zxcvbn_result['score']
    suggestions = zxcvbn_result['feedback']['suggestions']
    warning = zxcvbn_result['feedback']['warning']
    score += zxcvbn_score

    # Feedback based on analysis
    if length < 8:
        feedback.append("Password is too short. Consider using at least 8 characters.")
    if not re.search(r'[a-z]', password):
        feedback.append("Add lowercase letters to increase complexity.")
    if not re.search(r'[A-Z]', password):
        feedback.append("Add uppercase letters to increase complexity.")
    if not re.search(r'[0-9]', password):
        feedback.append("Add digits to increase complexity.")
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        feedback.append("Add special characters to increase complexity.")
    if warning:
        feedback.append(warning)
    feedback.extend(suggestions)

    # Score normalization to a scale of 1-10
    final_score = min(score, 10)

    return final_score, feedback

if _name_ == "_main_":
    password = input("Enter a password to check its strength: ")
    strength, feedback = check_password_strength(password)

    print(f"Password Strength Score: {strength}/10")
    print("Feedback:")
    for comment in feedback:
        print(f"- {comment}")
